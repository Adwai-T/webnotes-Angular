<h1 id="css">CSS</h1>
<p><code>&lt;link rel=&quot;stylesheet&quot; href=&quot;styles.css&quot;&gt;</code></p>
<h2 id="css-basics">CSS Basics</h2>
<pre><code class="lang-css"><span class="hljs-comment">/*Select element and Add style to multiple elements.*/</span>
<span class="hljs-selector-tag">p</span>, <span class="hljs-selector-tag">li</span> {
    <span class="hljs-attribute">color</span>: green;
}

<span class="hljs-comment">/*Change default behaviour of elements in html*/</span>
<span class="hljs-selector-tag">li</span> {
  <span class="hljs-attribute">list-style-type</span>: none;
}
</code></pre>
<h3 id="adding-a-class">Adding a class</h3>
<p>We use the <code>.</code> selector for selecting elements with their class name.</p>
<pre><code class="lang-html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Item one<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"special"</span>&gt;</span>Item two<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Item <span class="hljs-tag">&lt;<span class="hljs-name">em</span>&gt;</span>three<span class="hljs-tag">&lt;/<span class="hljs-name">em</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span>
</code></pre>
<pre><code class="lang-css"><span class="hljs-comment">/*Will be applied to all the classes with the name special*/</span>
<span class="hljs-selector-class">.special</span> {
  <span class="hljs-attribute">color</span>: orange;
  <span class="hljs-attribute">font-weight</span>: bold;
}

<span class="hljs-comment">/*Will be added only to the elements that are li's or span's*/</span>
<span class="hljs-selector-tag">li</span><span class="hljs-selector-class">.special</span>,
<span class="hljs-selector-tag">span</span><span class="hljs-selector-class">.special</span> {
  <span class="hljs-attribute">color</span>: orange;
  <span class="hljs-attribute">font-weight</span>: bold;
}
</code></pre>
<h3 id="styling-things-based-on-their-location-in-a-document">Styling things based on their location in a document</h3>
<ul>
<li>Descendant combinator : For nested element selection. In below example select <code>&lt;em&gt;</code> inside <code>&lt;li&gt;</code>.</li>
</ul>
<pre><code class="lang-css"><span class="hljs-selector-tag">li</span> <span class="hljs-selector-tag">em</span> {
  <span class="hljs-attribute">color</span>: rebeccapurple;
}
</code></pre>
<ul>
<li>Adjacent sibling combinator :</li>
</ul>
<pre><code class="lang-css"><span class="hljs-selector-tag">h1</span> + <span class="hljs-selector-tag">p</span> {
  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">200%</span>;
}
</code></pre>
<h3 id="styling-things-based-on-state">Styling things based on state</h3>
<pre><code class="lang-css"><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:link</span> {
  <span class="hljs-attribute">color</span>: pink;
}

<span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:visited</span> {
  <span class="hljs-attribute">color</span>: green;
}

<span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span> {
  <span class="hljs-attribute">text-decoration</span>: none;
}
</code></pre>
<h3 id="combining-selectors-and-combinators">Combining selectors and combinators</h3>
<pre><code class="lang-css"><span class="hljs-comment">/* selects any &lt;span&gt; that is inside a &lt;p&gt;, which is inside an &lt;article&gt;  */</span>
<span class="hljs-selector-tag">article</span> <span class="hljs-selector-tag">p</span> <span class="hljs-selector-tag">span</span> { ... }

<span class="hljs-comment">/* selects any &lt;p&gt; that comes directly after a &lt;ul&gt;, which comes directly after an &lt;h1&gt;  */</span>
<span class="hljs-selector-tag">h1</span> + <span class="hljs-selector-tag">ul</span> + <span class="hljs-selector-tag">p</span> { ... }

<span class="hljs-selector-tag">body</span> <span class="hljs-selector-tag">h1</span> + <span class="hljs-selector-tag">p</span> <span class="hljs-selector-class">.special</span> {
  <span class="hljs-attribute">color</span>: yellow;
  <span class="hljs-attribute">background-color</span>: black;
  <span class="hljs-attribute">padding</span>: <span class="hljs-number">5px</span>;
}
</code></pre>
<h2 id="intermediate-css">Intermediate CSS</h2>
<h3 id="functions">Functions</h3>
<pre><code class="lang-css"><span class="hljs-selector-class">.outer</span> {
  <span class="hljs-attribute">border</span>: <span class="hljs-number">5px</span> solid black;
}

<span class="hljs-selector-class">.box</span> {
  <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span>;
  <span class="hljs-attribute">width</span>: <span class="hljs-built_in">calc</span>(90% - 30px);
  <span class="hljs-attribute">background-color</span>: rebeccapurple;
  <span class="hljs-attribute">color</span>: white;
}
<span class="hljs-comment">/*Or*/</span>
<span class="hljs-selector-class">.box</span> {
  <span class="hljs-attribute">margin</span>: <span class="hljs-number">30px</span>;
  <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;
  <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;
  <span class="hljs-attribute">background-color</span>: rebeccapurple;
  <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(0.8turn)
}
</code></pre>
<h3 id="-rules">@rules</h3>
<ul>
<li><p><code>@import &#39;styles2.css&#39;;</code> Imports one css into another.</p>
</li>
<li><p><code>@media</code> : Used to create media queries. Discussed later.</p>
</li>
</ul>
<h3 id="shorthands">Shorthands</h3>
<pre><code class="lang-css"><span class="hljs-attribute">padding</span>: 10px 15px 15px 5px;

<span class="scss"><span class="hljs-attribute">padding-top</span>: <span class="hljs-number">10px</span>;
<span class="hljs-attribute">padding-right</span>: <span class="hljs-number">15px</span>;
<span class="hljs-attribute">padding-bottom</span>: <span class="hljs-number">15px</span>;
<span class="hljs-attribute">padding-left</span>: <span class="hljs-number">5px</span>;

<span class="hljs-attribute">background</span>: red url(bg-graphic.png) <span class="hljs-number">10px</span> <span class="hljs-number">10px</span> repeat-x fixed;

<span class="hljs-attribute">background-color</span>: red;
<span class="hljs-attribute">background-image</span>: url(bg-graphic.png);
<span class="hljs-attribute">background-position</span>: <span class="hljs-number">10px</span> <span class="hljs-number">10px</span>;
<span class="hljs-attribute">background-repeat</span>: repeat-x;
<span class="hljs-attribute">background-attachment</span>: fixed;</span>
</code></pre>
<h3 id="media-queries">Media Queries</h3>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries">Using_media_queries</a></p>
<hr>
<h2 id="ui-component-traversy-media-examples">UI Component Traversy Media Examples</h2>
<pre><code class="lang-css">
* {
  box-sizing: border-box;/*Set <span class="hljs-keyword">in</span> most project main <span class="hljs-built_in">file</span> <span class="hljs-keyword">to</span> <span class="hljs-keyword">not</span> be effected <span class="hljs-keyword">by</span> margin <span class="hljs-keyword">and</span> padding <span class="hljs-keyword">given</span> <span class="hljs-keyword">by</span> default <span class="hljs-keyword">by</span> browser.*/
}
</code></pre>
<ul>
<li><p><code>vh</code> : is a unit like pixel and used to represent the view area.</p>
</li>
<li><p>object-fit:cover; (Is like background size for background images)</p>
</li>
<li><p>gap : px % ; set gap between elements in container.</p>
</li>
</ul>
<hr>
<h2 id="free-code-camp-cheat-sheet">Free code Camp Cheat Sheet</h2>
<ul>
<li>Text :</li>
</ul>
<p>text-align : justify, right, center, left(default)
text-decoration: underline, line-through
font-style: italic
background-color : rgba(), hsl(), linear-gradient(gradient_direction, color 1, color 2, color 3, ...), repeating-linear-gradient(), url()</p>
<p>font-weight : bold
Note:
Set the font-weight of the h1 tag to 800.
Set the font-weight of the h2 tag to 600.
Set the font-weight of the h3 tag to 500.
Set the font-weight of the h4 tag to 400.
Set the font-weight of the h5 tag to 300.
Set the font-weight of the h6 tag to 200.</p>
<p>font-size : 27 pixels
Note:
Set the font-size of the h1 tag to 68px.
Set the font-size of the h2 tag to 52px.
Set the font-size of the h3 tag to 40px.
Set the font-size of the h4 tag to 32px.
Set the font-size of the h5 tag to 21px.
Set the font-size of the h6 tag to 14px.</p>
<p>text-transform : lowercase, uppercase, capitalize, initial, inherit, none</p>
<p>line-height: 25px;</p>
<ul>
<li>Containers :</li>
</ul>
<p>width, height,</p>
<p>transform: scale()-(Transform/change size of element by scale), skewX(-32deg)-(makes the element tilt like \ this at the given degree), same skewY(20 deg)</p>
<p>box-shadow: offset-x, offset-y, blur-radius, spread-radius, color;</p>
<p>border-radius: 50%-(This will make it a circle)</p>
<p>position: relative(move element relative to its parent), absolute(fix the postion of the element relative to its parent),
fixed(Fix the postion of an element relative to browser window, example nav bar), sticky;</p>
<p>float: left, right;</p>
<p>z-index: (Gives how the elements are stacked over one another, higher number will be stacked above lower numbers.)</p>
<p>opacity : 1 to 0 values</p>
<p>margin: auto,</p>
<p>background-color:</p>
<p>.className::after {}, .className::before{}</p>
<ul>
<li>anchor :</li>
</ul>
<p>a:hover</p>
<ul>
<li>Animations:</li>
</ul>
<pre><code class="lang-css"><span class="hljs-selector-id">#anim</span> {
  <span class="hljs-attribute">animation-name</span>: colorful;
  <span class="hljs-attribute">animation-duration</span>: <span class="hljs-number">3s</span>;
}

@<span class="hljs-keyword">keyframes</span> colorful {
  0% {
    <span class="hljs-attribute">background-color</span>: blue;
  }
  100% {
    <span class="hljs-attribute">background-color</span>: yellow;
  }
}
</code></pre>
<p>animation-fill-mode: forwards; (If we use this with button:hover and some animation like shown above the animation will keep playing until we have our mouse is on the button that we keep hovering. It should be put with the hover and not in the @keyframes)</p>
<p>animation-iteration-count: 3; (By default the animations will work continously for as much time as set, with this there will be limited amount of iterations)</p>
<p>animation-duration: sec (Time in which one iteration of the animations in completed)</p>
<p>animation-timing-function: linear, ease-out, cubic-bezier(0.25, 0.25, 0.75, 0.75); (determines in how how the animation cycle progresses) --&gt; for a more natural and soft movement use =&gt; animation-timing-function: cubic-bezier(0.311, 0.441, 0.444, 1.649);</p>
<h2 id="css-flex-box">CSS Flex Box</h2>
<ul>
<li>Containers :</li>
</ul>
<p><em>display</em>: flex; (Sets the container to be a Flex box container)</p>
<p><em>flex-direction</em>: (default)row, column-reverse, row-reverse, column;</p>
<p><em>justify-content</em>: center, flex-start(default), flex-end, space-between, space-around, space-evenly; (Adjust elements in a horizontal space)</p>
<p><em>align-items</em>: flex-start, flex-end, stretch, center, baseline; (Adjust elements in a vertical container)</p>
<p><em>flex-wrap</em>: nowrap, wrap, wrap-reverse; (extra items move into a new row or column.)</p>
<p><em>flex-shrink</em>: (px, em, %, auto, etc.) numeric value in the ratio at which the items should shrink. (Items shrink when the width of the parent container is smaller than the combined widths of all the flex items within it.)
(The flex-shrink property takes numbers as values. The higher the number, the more it will shrink compared to the other items in the container. For example, if one item has a flex-shrink value of 1 and the other has a flex-shrink value of 3, the one with the value of 3 will shrink three times as much as the other.)</p>
<p>flex-grow: controls the size of items when the parent container expands.(works with similar rule as above flex-shrink)</p>
<p>flex-grow, flex-shrink, and flex-basis : flex: 1 0 10px(can be auto); (respectively)</p>
<p>order : Takes number and can have negative values. Order elements according to numbers.</p>
<p>align-self: Same properties as align-items. Set align of individual item then setting them all at once in the parent. Any alignment set in the parent will be overriden.</p>
<h2 id="css-grid">CSS grid</h2>
<p>display: grid;</p>
<p>grid-template-columns: 50px 50px; set size of each of the element in the grid;
grid-template-columns: auto 50px 10% 2fr 1fr;(Note that there is no comman separating the value just a whitespace)</p>
<p>grid-column-gap: 10px;</p>
<p>grid-row-gap: 10px;</p>
<p>grid-gap: 10px 20px;</p>
<p>grid-column: 1 / 3;(Is a shorthand property for grid-column-start and grid-column-end)</p>
<p>grid-row: (works same as above grid-column)</p>
<p>justify-self: start, center, end; (Align horizontally)</p>
<p>align-self: start, center, end;(Align vertically)</p>
<p>grid-template-areas:
  &quot;header header header&quot;
  &quot;advert content content&quot;
  &quot;footer footer footer&quot;;</p>
<p>(.) Can be used to denote an empty space.</p>
<p>grid-area: header, footer;</p>
<p>item1 { grid-area: 1/1/2/4; }</p>
<p>Use repeat function : grid-template-columns: repeat(2, 1fr 50px) 20px; =&gt;same as =&gt; grid-template-columns: 1fr 50px 1fr 50px 20px;</p>
<p>grid-template-columns: 100px minmax(50px, 200px);</p>
<p>auto-fill: auto-fit;</p>
<pre><code class="lang-css">@<span class="hljs-keyword">media</span> (min-width: <span class="hljs-number">300px</span>){
  <span class="hljs-selector-class">.container</span>{
    <span class="hljs-attribute">grid-template-columns</span>: auto <span class="hljs-number">1</span>fr;
    <span class="hljs-attribute">grid-template-rows</span>: auto <span class="hljs-number">1</span>fr auto;
    <span class="hljs-attribute">grid-template-areas</span>:
      <span class="hljs-string">"advert header"</span>
      <span class="hljs-string">"advert content"</span>
      <span class="hljs-string">"advert footer"</span>;
  }
}
</code></pre>
<h2 id="pre-formated-text">Pre Formated Text</h2>
<p>It is used to insert text that is preformated. The formating of the text does not change and thus all the indenting and white spaces are kept as is.</p>
<p>But sometimes we want the pre tag content to wrap for mobile content. We could use following code for this.</p>
<pre><code class="lang-css"><span class="hljs-selector-tag">pre</span> {
  <span class="hljs-attribute">overflow-x</span>: auto;
  <span class="hljs-attribute">white-space</span>: pre-wrap;
  <span class="hljs-attribute">white-space</span>: -moz-pre-wrap;
  <span class="hljs-attribute">white-space</span>: -pre-wrap;
  <span class="hljs-attribute">white-space</span>: -o-pre-wrap;
  <span class="hljs-attribute">word-wrap</span>: break-word;
}
</code></pre>
